/*
 * Copyright 2021 Wooga GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */


plugins {
    id 'java-library'
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id 'nebula.release' version '15.2.0'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'io.codearte.nexus-staging' version '0.22.0'
    id "io.github.gradle-nexus.publish-plugin" version "1.0.0"
}

allprojects {
    group "com.wooga.security"
}


List<String> cliTasks = project.rootProject.gradle.startParameter.taskNames
if (cliTasks.contains("rc")) {
    cliTasks.remove("rc")
    cliTasks.add("candidate")
    project.rootProject.gradle.startParameter.setTaskNames(cliTasks)
}

dependencies {
    api project(":macos-security-jni")
    implementation 'org.codehaus.groovy:groovy-all:2.4.15'
    testImplementation 'com.github.stefanbirkner:system-rules:1.19.0'
    testImplementation 'org.spockframework:spock-core:1.2-groovy-2.4'
}

repositories {
    mavenCentral()
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

nexusPublishing {
    repositories {
        sonatype {
            username = project.hasProperty('ossrhUsername') ? project.property('ossrhUsername') : System.getenv('OSSRH_USERNAME')
            password = project.hasProperty('ossrhPassword') ? project.property('ossrhPassword') : System.getenv('OSSRH_PASSWORD')
        }
    }
}

postRelease.dependsOn(tasks.publish)

afterEvaluate {
    tasks."final".dependsOn(tasks.publishToSonatype, tasks.closeAndReleaseSonatypeStagingRepository)
    tasks."candidate".dependsOn(tasks.publishToSonatype, tasks.closeAndReleaseSonatypeStagingRepository)
    tasks.publishToSonatype.mustRunAfter(tasks.postRelease)
    tasks.closeSonatypeStagingRepository.mustRunAfter(tasks.publishToSonatype)
    tasks.publish.mustRunAfter(tasks.release)
}

apply from: 'publish-helper.gradle'
